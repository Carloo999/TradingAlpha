@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using TradingAlpha.App.Data
@using TradingAlpha.App.Enums
@using TradingAlpha.App.Services.Interfaces

@inject IApplicationUserManager ApplicationUserManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled/>
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.PrivacyStatus" class="form-control" placeholder="Please select status.">
                    @if (PrivacyStatus == PrivacyStatus.Public)
                    {
                        <option selected="selected">@PrivacyStatus.Public</option>
                        <option>@PrivacyStatus.Private</option>
                    }
                    else
                    {
                        <option>@PrivacyStatus.Public</option>
                        <option selected="selected">@PrivacyStatus.Private</option>
                    }
                </InputSelect>
                <label for="privacy-status" class="form-label">Privacy status</label>
                <ValidationMessage For="() => Input.PrivacyStatus" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private PrivacyStatus PrivacyStatus;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        //TODO: somehow get current privacy status and display that
        
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        PrivacyStatus = user.PrivacyStatus;
        
        
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PrivacyStatus != PrivacyStatus)
        {
            var setStatusResult = await ApplicationUserManager.ChangePrivacySetting(user, Input.PrivacyStatus);

            if (!setStatusResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set privacy status.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Display(Name = "Privacy status")]
        public PrivacyStatus PrivacyStatus { get; set; }
    }

}