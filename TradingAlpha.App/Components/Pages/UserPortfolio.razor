@page "/UserPortfolio"
@page "/UserPortfolio/{Username}"
@using TradingAlpha.App.Services.Interfaces
@using TradingAlpha.App.Models.EntryTypes
@using TradingAlpha.App.Data
@using TradingAlpha.App.Enums

@inject IPortfolioManager PortfolioManager
@inject ITransactionManager TransactionManager
@inject IApplicationUserManager UserManager
@inject AuthenticationStateProvider AuthStateProvider

<title>Portfolio</title>

<div id="BuySellModal" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
           <button type="button" class="btn btn-primary">Sell</button>
          <input type="number" id="numericInput" name="numericInput" min="/* TO DO */" step="1">
           <button type="button" class="btn btn-primary">Buy</button>
      </div>
      <div class="modal-footer" id="BuySellModalFooter">
        <button type="button" class="btn btn-primary">Buy x10</button>
        <button type="button" class="btn btn-primary">Buy x1</button>
        <button type="button" class="btn btn-primary">Sell x1</button>
        <button type="button" class="btn btn-primary" @onclick="TransactionManager.Sell(_owner, _type, 10,  /*(_type == BaseDataType.Stock) ? stockEntry.Symbol : cryptoEntry.Name*/">Sell x10</button>
      </div>
    </div>
  </div>
</div>

<div class="container">
    <div class="row" id="TopBar">
        <h3>User Portfolio</h3>
    </div>
</div>

<div class="container">
    <button class="btn btn-primary" @onclick="ToggleMode">Switch Mode</button>
</div>

<table class="table">
    <thead>
        <tr>
            @if (_inStockMode)
            {
                <th>Ticker</th>
            }
            else
            {
                <th>Name</th>
            }
            <th>Price</th>
            <th>Amount</th>
            <th>Value</th>
            @if (_editable)
            {
                <th>Buy/Sell</th>
            }
        </tr>
    </thead>

    <tbody>
        @if (_inStockMode)
        {
            foreach (var stockEntry in _stockEntries)
            {
                <tr>
                    <td>@stockEntry.Symbol</td>
                    <td>@stockEntry.CurrentPrice</td>
                    <td>@stockEntry.Amount</td>
                    <td>@(stockEntry.Amount * stockEntry.CurrentPrice)</td>
                    @if (_editable)
                    {
/* Does @stockEntry.Symbol work? */ <td> <button type="button" data-SymbolName="@stockEntry.Symbol" data-toggle="modal" data-target="#BuySellModal">Buy/Sell</button> </td>
                    }
                </tr>
            }
        }
        else
        {
            foreach (var cryptoEntry in _cryptoEntries)
            {
                <tr>
                    <td>@cryptoEntry.Name</td>
                    <td>@cryptoEntry.CurrentPrice</td>
                    <td>@cryptoEntry.Amount</td>
                    <td>@(cryptoEntry.Amount * cryptoEntry.CurrentPrice)</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private bool _inStockMode = true;
    private BaseDataType _type = BaseDataType.Stock;
    private ApplicationUser? _user;
    private ApplicationUser? _owner;
    private bool _authorized;
    private bool _editable;
    private StockEntry[] _stockEntries;
    private CryptoEntry[] _cryptoEntries;

    [Parameter] public string Username { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        if (_owner != null)
        {
            (_authorized, _editable) = await UserManager.GetIsAuthorized(_owner, _user);
        }

        _stockEntries = await PortfolioManager.GetStockEntries(_owner);
        _cryptoEntries = await PortfolioManager.GetCryptoEntries(_owner);
    }

    private async Task<ApplicationUser?> GetCurrentUser()
    {
        AuthenticationState auth = await AuthStateProvider.GetAuthenticationStateAsync();
        return await UserManager.GetUserByAuthState(auth);
    }

    private async Task GetUsers()
    {
        if (string.IsNullOrEmpty(Username))
        {
            _user = await GetCurrentUser();
            if (_user != null)
            {
                Username = _user.Id;
                _owner = _user;
            }
            else
            {
                // Message
            }
        }
        else
        {
            _owner = await UserManager.GetUserById(Username);
            _user = await GetCurrentUser();
            if (_owner == null)
            {
                // Message
            }
        }
    }

    private void ToggleMode()
    {
        _inStockMode = !_inStockMode;
        _type = _type == BaseDataType.Stock ? BaseDataType.Crypto : BaseDataType.Stock;
    }
}