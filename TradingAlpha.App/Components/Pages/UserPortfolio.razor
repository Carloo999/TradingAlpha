@page "/UserPortfolio"
@page "/UserPortfolio/{Username}"
@using TradingAlpha.App.Services.Interfaces
@using TradingAlpha.App.Models.EntryTypes
@using TradingAlpha.App.Data
@using TradingAlpha.App.Enums
@using TradingAlpha.App.Components.PageComponents
@using TradingAlpha.App.Models.TransactionTypes
@using System.Globalization

@inject IPortfolioManager PortfolioManager
@inject ITransactionManager TransactionManager
@inject IApplicationUserManager UserManager
@inject AuthenticationStateProvider AuthStateProvider

<title>Portfolio</title>

<div class="container">
    <div class="row" id="TopBar">
        <h3>User Portfolio</h3>
    </div>
</div>

<div class="container">
    <button class="btn btn-primary" id="ToggleModeButton" @onclick="ToggleMode">  @(_type == BaseDataType.Stock ? "Stock" : "Crypto") </button>
    <BuyNewModal _owner="@_owner"/>
    <button class="btn btn-primary" id="UpdateButton" @onclick="() => PortfolioManager.UpdateAllPricesInPort(_owner)">Update Prices</button>
</div>

<table class="table">
    <thead>
    <tr>
        @if (_inStockMode)
        {
            <th>Ticker</th>
        }
        else
        {
            <th>Name</th>
        }
        <th>Price</th>
        <th>Amount</th>
        <th>Value</th>
        @if (_editable)
        {
            <th>Buy/Sell</th>
        }
    </tr>
    </thead>

    <tbody>
    @if (_inStockMode)
    {
        foreach (var stockEntry in _stockEntries)
        {
            <tr>
                <td>@stockEntry.Symbol</td>
                <td>@stockEntry.CurrentPrice</td>
                <td>@stockEntry.Amount</td>
                <td>@(stockEntry.Amount * stockEntry.CurrentPrice)</td>
                @if (_editable)
                {
                    <td> <EditModal _owner="@_owner" _amountOwned="@stockEntry.Amount" _type="BaseDataType.Stock" _NameSymbol="@stockEntry.Symbol"/> </td>
                }
            </tr>
        }
    }
    else
    {
        foreach (var cryptoEntry in _cryptoEntries)
        {
            <tr>
                <td>@cryptoEntry.Name</td>
                <td>@cryptoEntry.CurrentPrice</td>
                <td>@cryptoEntry.Amount</td>
                <td>@(cryptoEntry.Amount * cryptoEntry.CurrentPrice)</td>
                @if (_editable)
                {
                    <td> <EditModal _owner="@_owner" _amountOwned="@cryptoEntry.Amount" _type="BaseDataType.Crypto" _NameSymbol="@cryptoEntry.Name"/> </td>
                }
            </tr>
        }
    }
    </tbody>
</table>

<p>Transactions</p>

<table class="table">
    <thead>
    <tr>
        <th>Time</th>
        @if (_inStockMode)
        {
            <th>Ticker</th>
        }
        else
        {
            <th>Name</th>
        }
        <th>At Price</th>
        <th>Amount</th>
        <th>Value</th>
    </tr>
    </thead>

    <tbody>
    @if (_inStockMode)
    {
        foreach (var transaction in _stockTransactions)
        {
            <tr>
                <td>@transaction.Timestamp.ToString("dd.MM.yyyy HH:mm:ss", CultureInfo.GetCultureInfo("de-DE"))</td>
                <td>@transaction.Symbol</td>
                <td>@transaction.AtPrice</td>
                <td>@transaction.Amount</td>
                <td>@(transaction.Amount * transaction.AtPrice)</td>
            </tr>
        }
    }
    else
    {
        foreach (var transaction in _cryptoTransactions)
        {
            <tr>
                <td>@transaction.Timestamp.ToString("dd.MM.yyyy HH:mm:ss", CultureInfo.GetCultureInfo("de-DE"))</td>
                <td>@transaction.Name</td>
                <td>@transaction.AtPrice</td>
                <td>@transaction.Amount</td>
                <td>@(transaction.Amount * transaction.AtPrice)</td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private bool _inStockMode = true;
    private BaseDataType _type = BaseDataType.Stock;
    private ApplicationUser? _user;
    private ApplicationUser? _owner;
    private bool _authorized;
    private bool _editable;
    private StockEntry[] _stockEntries;
    private CryptoEntry[] _cryptoEntries;
    private StockTransaction[] _stockTransactions;
    private CryptoTransaction[] _cryptoTransactions;

    [Parameter] public string Username { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        if (_owner != null)
        {
            (_authorized, _editable) = await UserManager.GetIsAuthorized(_owner, _user);
        }

        _stockEntries = await PortfolioManager.GetStockEntries(_owner);
        _cryptoEntries = await PortfolioManager.GetCryptoEntries(_owner);
        _stockTransactions = TransactionManager.GetStockTransactions(_owner);
        _cryptoTransactions = TransactionManager.GetCryptoTransactions(_owner);
    }

    private async Task<ApplicationUser?> GetCurrentUser()
    {
        AuthenticationState auth = await AuthStateProvider.GetAuthenticationStateAsync();
        return await UserManager.GetUserByAuthState(auth);
    }

    private async Task GetUsers()
    {
        if (string.IsNullOrEmpty(Username))
        {
            _user = await GetCurrentUser();
            if (_user != null)
            {
                Username = _user.Id;
                _owner = _user;
            }
            else
            {
                // Message
            }
        }
        else
        {
            _owner = await UserManager.GetUserById(Username);
            _user = await GetCurrentUser();
            if (_owner == null)
            {
                // Message
            }
        }
    }

    private async void ToggleMode()
    {
        _inStockMode = !_inStockMode;
        _type = _type == BaseDataType.Stock ? BaseDataType.Crypto : BaseDataType.Stock;
        
        if (_inStockMode)
        {
            _stockEntries = await PortfolioManager.GetStockEntries(_owner);
            _stockTransactions = TransactionManager.GetStockTransactions(_owner);
        }
        else
        {
            _cryptoEntries = await PortfolioManager.GetCryptoEntries(_owner);
            _cryptoTransactions = TransactionManager.GetCryptoTransactions(_owner);
        }
        StateHasChanged();
    }
}