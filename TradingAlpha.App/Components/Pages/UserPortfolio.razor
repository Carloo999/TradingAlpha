@page "/UserPortfolio" /* Wenn User eigenes Portfolio öffnen will*/
@page "/UserPortfolio/{Username}" /* Wenn User fremdes oder eigenes Portfolio öffnen will*/

@inject IPortfolioManager Portfolio
@inject ITransactionManager Transaction
@inject IApplicationUserManager UserManager
@inject AuthenticationStateManager AuthState

<html> 
<head>
<title> Portfolio </title>

<div class="container"> 
    <div class="row" id="Top Bar">
        <h3> UserPortfolio </h3>
    </div>
</div>

</head>

<body> 

    <div class="container"> 

/* Button to switch Stock/Crypto mode */

<table class="table">
  <thead>
    <tr>
        @if (inStockMode) {<th> Ticker </th>} else {<th> Kürzel </th>}
        <th> Stockprice </th>
        <th> # of Stocks owned </th>
        <th> Value of Stocks owned </th>
    </tr>
  </thead>
  <tbody>
    @if (inStockMode) {
        foreach (StockEntry stockentry in StockEntry) {
            <tr>
                <td>@stockentry.Symbol</td>
                <td>@stockentry.CurrentPrice</td>
                <td>@stockentry.Amount</td>
                <td>@stockentry.Amount * stockentry.CurrentPrice</td>
            </tr>
        } else {
            foreach (CryptoEntry cryptoentry in CryptoEntry) {
                <tr>
                    <td>@cryptoentry.Symbol</td>
                    <td>@cryptoentry.CurrentPrice</td>
                    <td>@cryptoentry.Amount</td>
                    <td>@cryptoentry.Amount * cryptoentry.CurrentPrice</td>
                }
        }
  </tbody>
</table>

    </div>

</body>

</html>

@code {
    public bool inStockMode = true;
    public ApplicationUser? User {get;set;}
    public ApplicationUser? Owner {get;set;}
    [Parameter]
    public string Username {get;set;} = string.Empty;
    private bool _authorized;
    private bool _editable;

    protected override async Task OnInitializedAsync() {
      await GetUsers();
      if(Owner != null) {
        (_authorized,_editable) = await UserManager.GetIsAuthorized(Owner,User);
      }
    StockEntry = await Portfolio.GetStockEntries();
    CryptoEntry = await Potfolio.GetCryptoEntries();
}

    private async Task<ApplicationUser?> GetCurrentUser() {
      AuthenticationState auth = await AuthState.GetAuthenticationStateAsync();
      return UserManager.GetUserByAuthState(auth);
    }

    private async Task GetUsers() {
      if (string.IsNullOrEmpty(Username)){
        User = await getCurrentUser();
        if (User != null) {
          Username = User.Id.ToString();
          Owner = User;
        } 
        else {
          //Message
        }
      }
      else {
        Owner = await UserManager.FindByIdAsync(Username);
        user = await GetCurrentUser();
        if(Owner == null) {
          //Message
        }
      }
    }
}
