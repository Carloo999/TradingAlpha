@page "/Analysis"
@using TradingAlpha.App.Services.Interfaces
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore.Query.Internal
@using TradingAlpha.App.Models
@rendermode InteractiveServer

@inject IStockDataService SData
@inject ICryptoDataService CData

<style>
    .container {
        border: 3px rgba(15, 194, 192,0.4);
        border-radius: 15px;
        border-style: solid;
        padding: 10px;;
    }
    
    .form-check-input:checked {
        background-color: #015958;
    }
    
    #Chart {
        height: 500px;
    }
    
    .btn-group{
        padding: 10px;
        text-align: center;
        width: 100%;
    }
    
    .background {background: #121212;}
    .accent1 {background: #023535}
    .accent2 {background: #015958}
    .accent3 {background: #008F8C}
    .accent4 {background: #0CABA0}
    .accent5 {background: #0FC2C0}
</style>

<PageTitle>Analysis</PageTitle>

@* Search Bar *@
<div class="input-group mb-3">
    <input @bind="SymbolInput" type="text" class="form-control" placeholder="Input crypto or stock symbol" aria-label="Symbol" aria-describedby="basic-addon2" id="SymbolSearch">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="getStockData" >Search</button>
    </div>
</div>

<p>@Message</p>
<p>@open</p>

@*Graph and indicators*@
<div class="row">
    @* Graph *@
    <div class="col-9">
        <div class="container"
             align="left"
             id="Chart">
            <ApexChart TItem="MyData"
                       Height="@("100%")">

                <ApexPointSeries TItem="MyData"
                                 Items="Data"
                                 Name="Net Profit"
                                 SeriesType="SeriesType.Bar"
                                 XValue="e => e.Category"
                                 YValue="e => e.NetProfit"/>

                <ApexPointSeries TItem="MyData"
                                 Items="Data"
                                 Name="Revenue"
                                 SeriesType="SeriesType.Bar"
                                 XValue="e => e.Category"
                                 YValue="e => e.Revenue"/>
            </ApexChart>
        </div>
    </div>
    
    @* Indicators *@
    <div class="col">
        
        <div class="container">
            <div class="btn-group btn-group-sm" role="group" aria-label="Delta T">
                <button type="button" class="btn btn-secondary">Hour</button>
                <button type="button" class="btn btn-secondary">Day</button>
                <button type="button" class="btn btn-secondary">Month</button>
            </div>
            <div class="btn-group btn-group-sm" role="group" aria-label="TimeFrame">
                <button type="button" class="btn btn-secondary">1D</button>
                <button type="button" class="btn btn-secondary">1M</button>
                <button type="button" class="btn btn-secondary">6M</button>
                <button type="button" class="btn btn-secondary">1Y</button>
                <button type="button" class="btn btn-secondary">5Y</button>
            </div>
        </div>
        
        <div class="container">

            <h5>Indicators</h5>

            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="TradingVolume">
                <label class="form-check-label" for="TradingVolume">
                    Trading Volume
                </label>
            </div>

            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="MovingAverage">
                <label class="form-check-label" for="MovingAverage">
                    Moving Average
                </label>
            </div>

            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="RSI">
                <label class="form-check-label" for="RSI">
                    RSI
                </label>
            </div>
        </div>
    </div>
</div>

@*
<div class="row">
color scheme
    <div class="col">
        <div class="background">
            Background
        </div>
        <div class="accent1">
            accent1
        </div>
        <div class="accent2">
            accent2
        </div>
        <div class="accent3">
            accent3
        </div>
        <div class="accent4"> accent4</div>
    <div class="accent5"> accent5</div>
        </div>
</div>
*@
@code {

    private List<MyData> Data { get; set; } = new();

    protected override void OnInitialized()
    {
        Data.Add(new MyData { Category = "Jan", NetProfit = 12, Revenue = 33 });
        Data.Add(new MyData { Category = "Feb", NetProfit = 43, Revenue = 42 });
        Data.Add(new MyData { Category = "Mar", NetProfit = 112, Revenue = 23 });
    }

    public class MyData
    {
        public string Category { get; set; }
        public int NetProfit { get; set; }
        public int Revenue { get; set; }
    }


    string SymbolInput { get; set; }
    string Message { get; set; }
    decimal open { get; set; }


    @* Candlestick data 
    private List<StockPrice> stockPrices { get; set; } =
    *@

    void getInput()
    {
        Message = $"Input: {SymbolInput}";
    }


    public async Task getStockData()
    {
        getInput();
        var Data = await SData.GetHistBarData(SymbolInput, "1D", "2022-01-03T00:00:00Z", DateTimeExtensions.ToRFC3339(Date), 1000, "raw", "sip", "asc");
        HistBars Bars = Data;
        open = Bars.Bars[SymbolInput][0].Open;
    }

    @*
    public async Task getStockData()
    {
        HistBars bars = await SData.GetHistBarData(SymbolInput, "1D", "2022-01-03T00:00:00Z", "2022-01-04T00:00:00Z", 1000, "raw", "sip", "asc");
        open = bars.Bars[SymbolInput][0].Open;
    }
    
    }
    *@

    DateTime Date = DateTime.Today;

    public static class DateTimeExtensions
    {
        public static string ToRFC3339(DateTime date)
        {
            return date.ToUniversalTime().ToString("yyyy-MM-dd'T'HH:mm:ss.fffK");
        }
    }

}
@*
GetHistBarData()
symbols: AAPL,GOOG, / AAPL
timeframe: 
start:
end:
limit:
adjustment:
sort:
https://docs.alpaca.markets/reference/stockbars
GetLatestBar()

*@ 