@page "/Analysis"
@using TradingAlpha.App.Services.Interfaces
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore.Query.Internal
@using TradingAlpha.App.Models
@using System.Globalization
@using System.Diagnostics
@rendermode InteractiveServer

@inject IStockDataService SData
@inject ICryptoDataService CData


<PageTitle>Analysis</PageTitle>

<style> body{
    @BackgroundColor
}
</style>

@* Search Bar *@
<div class="row justify-content-center">
    <div class="col">
        <div class="input-group mb-3" id="symbol_input_group">
            <div class="input-group-prepend">
             <button class="btn btn-outline-secondary" type="button" @onclick="SwitchService" id="Services" style="@ButtonColor">@CurService </button>   
            </div>
            <input @bind="SymbolInput" type="text" class="form-control" placeholder="Input crypto or stock symbol" aria-label="Symbol" aria-describedby="basic-addon2" id="SymbolSearch">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="GetDataAndRender">Search</button>
            </div>
            
        </div>
    </div>
</div>
@*Graph and indicators*@
<div class="row">
    @* Graph *@
    <div class="col-9">
        <div class="container"
             align="left"
             id="Chart">
            <ApexChart @ref=_mainChart TItem="HistBarsEntry"
                       XAxisType="XAxisType.Category"
                       Height="@("100%")"
                       Debug    
                       Options=_options
            >

                
                <ApexCandleSeries TItem="HistBarsEntry"
                                  Items="HistBarEntries"
                                  Name="Stock Prices"
                                  XValue="@(e => e.Time)"
                                  Open="@(e => e.Open)"
                                  High="@(e => e.High)"
                                  Low="@(e => e.Low)"
                                  Close="@(e => e.Close)"
                                  Stroke="@(new SeriesStroke{ Width=1 })"
                />
                
                <ApexPointSeries    TItem="HistBarsEntry"
                                    Items="HistBarEntries"
                                    Name="SMA"
                                    SeriesType="SeriesType.Line"
                                    XValue="@(e => e.Time)"
                                    YAggregate="@(e => e.Average(e => e.SMA))"
                                    Stroke="@(new SeriesStroke{ Width = 3, Color = "#ff0000"})"
                />

                <ApexPointSeries    TItem="HistBarsEntry"
                                    Items="HistBarEntries"
                                    Name="VWAP"
                                    SeriesType="SeriesType.Line"
                                    XValue="@(e => e.Time)"
                                    YAggregate="@(e => e.Average(e => e.VolumeWeighted))"
                                    Stroke="@(new SeriesStroke{ Width = 3, Color = "#ff00c3"})"
                />
                
                <ApexPointSeries
                    TItem="HistBarsEntry"
                    Items="HistBarEntries"
                    Name="Volume"
                    SeriesType="SeriesType.Line"
                    XValue="@(e => e.Time)"
                    YAggregate="@(e => e.Average(e => Convert.ToDecimal(e.Volume)))"
                    Stroke="@(new SeriesStroke{ Width = 3, Color = "#8900bf"})"
                />        

            </ApexChart>
        </div>
    </div>

    @* Indicators *@
    <div class="col">
        
        <div class="container" id="FrameStartDate">
            <h5>Bar width</h5>
            <div class="btn-group special" role="group" aria-label="TimeFrame">
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetTimeFrame("1min"))" style="@curBWColors.BW1min">1min</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetTimeFrame("15min"))" style="@curBWColors.BW15min">15min</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetTimeFrame("1H"))" style="@curBWColors.BW1H">Hour</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetTimeFrame("1D"))" style="@curBWColors.BW1D">Day</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetTimeFrame("1M"))"  style="@curBWColors.BW1M">Month</button>
            </div>
            <h5>Timeframe</h5>
            <div class="btn-group special" role="group" aria-label="StartDate">
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetStartDate("1D"))" style="@curTFColors.TF1D">1D</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetStartDate("1M"))" style="@curTFColors.TF1M">1M</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetStartDate("6M"))" style="@curTFColors.TF6M">6M</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetStartDate("1Y"))" style="@curTFColors.TF1Y">1Y</button>
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => SetStartDate("5Y"))" style="@curTFColors.TF5Y">5Y</button>
            </div>
        </div>
        
        <div class="container" id="Indicators">

            <h5>Toggle Indicators</h5>
            
            <button type="button" class="btn btn-outline-dark" @onclick="ToggleVolume" data-bs-toggle="tooltip" data-bs-placement="right" title="Trading Volume" id="indicators">
                Volume
            </button>

            <button type="button" class="btn btn-outline-dark" @onclick="ToggleVWAP" data-bs-toggle="tooltip" data-bs-placement="right" title="Volume Weighted Average Price" id="indicators">
                VWAP
            </button>

            <button type="button" class="btn btn-outline-dark" @onclick="ToggleSMA" data-bs-toggle="tooltip" data-bs-placement="right" title="Simple Moving Average" id="indicators">
                SMA
            </button>
            
        </div>
    </div>
</div>

<div class="alert alert-danger" role="alert" hidden="@ErrorHidden">
  @ErrMessage
</div>

@code {
    public bool ErrorHidden { get; set; } = true;
    public BWButtonColors curBWColors { get; set; } = BWButtonColors.startColors();
    public TFButtonColors curTFColors { get; set; } = TFButtonColors.startColors();
    public string CurService { get; set; } = "Stock";
    public string ButtonColor { get; set; } = "background-color: #8c00ff;";
    public string BackgroundColor { get; set; } = "background: rgb(140,0,255); background: linear-gradient(152deg, rgba(140,0,255,0.6) 1%, rgba(255,255,255,1) 80%);";
    
    public void SwitchService()
    {
        switch (CurService)
        {   
            case "Stock": 
                CurService = "Crypto";
                ButtonColor = "background-color: #00feff;";
                BackgroundColor = "background: rgb(0,254,255); background: linear-gradient(152deg, rgba(0,254,255,0.4) 1%, rgba(255,255,255,1) 80%);";
                break;
            case "Crypto": 
                CurService = "Stock";
                ButtonColor = "background-color: #8c00ff;";
                BackgroundColor = "background: rgb(140,0,255); background: linear-gradient(152deg, rgba(140,0,255,0.6) 1%, rgba(255,255,255,1) 80%);";
                break;
            default: 
                CurService = "Stock";
                ButtonColor = "background-color: #8c00ff;";
                BackgroundColor = "background: rgb(140,0,255); background: linear-gradient(152deg, rgba(140,0,255,0.6) 1%, rgba(255,255,255,1) 80%);";
                break;
         }

        ;
    }
    
    private ApexChart<HistBarsEntry> _mainChart;
    public List<HistBarsEntry>? HistBarEntries { get; set; }
    public int MaxPrice { get; set; }
    public int MinPrice { get; set; }
    private string? SymbolInput { get; set; }
    
    private ApexChartOptions<HistBarsEntry> _options = new();

    protected override void OnInitialized()
    {
        _options.Yaxis = new List<YAxis>();

        _options.Yaxis.Add(new YAxis
        {
            Title = new AxisTitle { Text = "Price" },
            SeriesName = "SMA",
            DecimalsInFloat = 0,
            Max = MaxPrice,
            Min = MinPrice,
        });
        _options.Yaxis.Add(new YAxis
        {
            Show = false,
            SeriesName = "Stock Prices",
            DecimalsInFloat = 0,
            Max = MaxPrice,
            Min = MinPrice,
        });
        
        _options.Yaxis.Add(new YAxis
        {
            Show = false,
            SeriesName = "VWAP",
            DecimalsInFloat = 0,
            Max = MaxPrice,
            Min = MinPrice,
        });
        
        _options.Yaxis.Add(new YAxis
        {
            Title = new AxisTitle { Text = "Volume" },
            SeriesName = "Volume",
            DecimalsInFloat = 0,
            Opposite = true
        });
        
    }

    private bool StockService { get; set; }
    private async Task GetDataAndRender()
    {
        try
        {
            HistBars baseData = CurService switch
            {
                "Stock" => await SData.GetHistBarData(SymbolInput, TimeFrame, DateTimeExtensions.ToRFC3339(StartDate), DateTimeExtensions.ToRFC3339(Date), 1000, "raw", "sip", "asc"),
                "Crypto" => await CData.GetHistBarData(SymbolInput, TimeFrame, DateTimeExtensions.ToRFC3339(StartDate), DateTimeExtensions.ToRFC3339(Date), 1000, "asc"),
                _ => new HistBars()
            };

            HistBarEntries = baseData.Bars[SymbolInput];
            _options = new ApexChartOptions<HistBarsEntry>();
            MaxPrice = getMaxPrice();
            MinPrice = getMinPrice();
            CalculateSMA();
            OnInitialized();            

            await _mainChart.RenderAsync();
            await ToggleSMA();
            await ToggleVolume();
            await ToggleVWAP();
            ErrorHidden = true;
        }
        
        catch (Exception e)
        {
            ErrMessage = "Input valid symbol. Use the official Stock-Ticker or when using Crypto [COIN SYMBOL]/USD";
            ErrorHidden = false;
        }

    }

    public async Task ToggleSMA()
    {
        await _mainChart.Series[1].Toggle();
    }
    
    public async Task ToggleVolume()
    {
        await _mainChart.Series[3].Toggle();
    }

    public async Task ToggleVWAP()
    {
        await _mainChart.Series[2].Toggle();
    }
    
    public void CalculateSMA()
    {
        int len = HistBarEntries.Count();
        int period = RoundToOdd(len/7.3);
        int radius = (period - 1 )/ 2;
        
        for (int i = 0; i < len; i++)
        {
            int devisor = 0;
            decimal sumPrices = 0;
            for (int a = i - radius; a <= i + radius; a++)
            {
                if (a < 0 || a > len-1)
                {
                    continue;
                }
                sumPrices += HistBarEntries[a].Close;
                devisor++;
            }

            HistBarEntries[i].SMA = sumPrices/devisor;
        }

    }

    public int RoundToOdd(double num)
    {
        int numRounded = Convert.ToInt32(Math.Floor(num));
        if (numRounded % 2 != 0)
        {
            return numRounded;
        }
        else
        {
            return numRounded += 1;
        }
    }

    public int getMinPrice()
    {
        var min = HistBarEntries[0].Low;
        foreach (var HistBarEntry in HistBarEntries)
        { 
            if (HistBarEntry.Low < min)
            {
                min = HistBarEntry.Low;
            }
        }

        return Convert.ToInt32(System.Math.Floor(min));
    }
    
    public int getMaxPrice()
    {
        var max = HistBarEntries[0].High;
        foreach (var HistBarEntry in HistBarEntries)
        { 
            if (HistBarEntry.High > max)
            {
                max = HistBarEntry.High;
            }
        }

        return Convert.ToInt32(System.Math.Ceiling(max));
    }
    
    public string TimeFrame { get; set; } = "1H";

    public void SetTimeFrame(string frame)
    {
        curBWColors = new BWButtonColors();
        TimeFrame = frame;
        switch (frame)
        {
            case "1min":
                curBWColors.BW1min = "background-color: #d4d4d4;";
                break;
            case "15min":
                curBWColors.BW15min = "background-color: #d4d4d4;";
                break;
            case "1H":
                curBWColors.BW1H = "background-color: #d4d4d4;";
                break;
            case "1D":
                curBWColors.BW1D = "background-color: #d4d4d4;";
                break;
            case "1M":
                curBWColors.BW1M = "background-color: #d4d4d4;";
                break;
        }
    }

    
    
    public DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-1);

    public void SetStartDate(string timestring)
    {
        curTFColors = new TFButtonColors();
        switch (timestring)
        {
            case "1D":
                StartDate = DateTime.Today.AddDays(-1);
                curTFColors.TF1D = "background-color: #d4d4d4;";
                break;
            case "1M":
                StartDate = DateTime.Today.AddMonths(-1);
                curTFColors.TF1M = "background-color: #d4d4d4;";
                break;
            case "6M":
                StartDate = DateTime.Today.AddMonths(-6);
                curTFColors.TF6M = "background-color: #d4d4d4;";
                break;
            case "1Y":
                StartDate = DateTime.Today.AddYears(-1);
                curTFColors.TF1Y = "background-color: #d4d4d4;";
                break;
            case "5Y":
                StartDate = DateTime.Today.AddYears(-5);
                curTFColors.TF5Y = "background-color: #d4d4d4;";
                break;
        }
       
    }
    
    
    
    DateTime Date = DateTime.Today;

    public static class DateTimeExtensions
    {
        public static string ToRFC3339(DateTime date)
        {
            return date.ToUniversalTime().ToString("yyyy-MM-dd'T'HH:mm:ss.fffK");
        }
    }
    
    private DateTime PrevDateTime { get; set; } = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

    private string FormatDateTime(DateTime currDateTime)
    {
        if (currDateTime.Day != PrevDateTime.Day)
        {
            PrevDateTime = currDateTime;@*RemoveLastChar(currDateTime.ToUniversalTime().ToString("u"))*@
            return(currDateTime.ToString("d",
                CultureInfo.CreateSpecificCulture("en-US")));
        }
        else
        {
            PrevDateTime = currDateTime;
            return (currDateTime.ToString("t", CultureInfo.CreateSpecificCulture("es-ES")));
        }
    }
    
    public string? ErrMessage { get; set; }
    
    
    public class BWButtonColors
    {
        public string BW1min { get; set; } = "background-color: #ffffff";
        public string BW15min { get; set; } = "background-color: #ffffff";
        public string BW1H { get; set; } = "background-color: #ffffff";
        public string BW1D { get; set; } = "background-color: #ffffff";
        public string BW1M { get; set; } = "background-color: #ffffff";

        public static BWButtonColors startColors()
        {
            BWButtonColors colors = new BWButtonColors();
            colors.BW1H = "background-color: #d4d4d4;";
            return colors;
        }
    }
    
    public class TFButtonColors
    {
        public string TF1D { get; set; } = "background-color: #ffffff";
        public string TF1M { get; set; } = "background-color: #ffffff";
        public string TF6M { get; set; } = "background-color: #ffffff";
        public string TF1Y { get; set; } = "background-color: #ffffff";
        public string TF5Y { get; set; } = "background-color: #ffffff";
        
        public static TFButtonColors startColors()
        {
            TFButtonColors colors = new TFButtonColors();
            colors.TF1M = "background-color: #d4d4d4;";
            return colors;
        }
    }
    
}
