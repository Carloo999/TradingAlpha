@page "/Analysis"
@using TradingAlpha.App.Services.Interfaces
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore.Query.Internal
@using TradingAlpha.App.Models
@using System.Globalization
@rendermode InteractiveServer

@inject IStockDataService SData
@inject ICryptoDataService CData



<PageTitle>Analysis</PageTitle>

@* Search Bar *@
<div class="input-group mb-3">
    <input @bind="SymbolInput" type="text" class="form-control" placeholder="Input crypto or stock symbol" aria-label="Symbol" aria-describedby="basic-addon2" id="SymbolSearch">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="getDataAndRender" >Search</button>
    </div>
</div>

@*Graph and indicators*@
<div class="row">
    @* Graph *@
    <div class="col-9">
        <div class="container"
             align="left"
             id="Chart">
            <ApexChart @ref=chart TItem="HistBarsEntry"
                       Height="@("100%")"
                       Debug>
                @*
                <ApexPointSeries TItem="MyData"
                                 Items="Data"
                                 Name="Net Profit"
                                 SeriesType="SeriesType.Bar"
                                 XValue="e => e.Category"
                                 YValue="e => e.NetProfit"/>*@
                
                <ApexCandleSeries TItem="HistBarsEntry"
                                  Items="HistBarsEntries"
                                  Name="Apex Stock Price"
                                  XValue="@(e => formatDateTime(e.Time))"
                                  Open="@(e => e.Open)"
                                  High="@(e => e.High)"
                                  Low="@(e => e.Low)"
                                  Close="@(e => e.Close)"
                                  />
                
            </ApexChart>
        </div>
    </div>

    @* Indicators *@
    <div class="col">
        
        <div class="container" id="FrameStartDate">
            <h5>Bar width</h5>
            <div class="btn-group btn-group-sm" role="group" aria-label="TimeFrame">
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetTimeFrame("1min"))">1min</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetTimeFrame("15min"))">15min</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetTimeFrame("1H"))">Hour</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetTimeFrame("1D"))">Day</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetTimeFrame("1M"))">Month</button>
            </div>
            <h5>Timeframe</h5>
            <div class="btn-group btn-group-sm" role="group" aria-label="StartDate">
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetStartDate("1D"))">1D</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetStartDate("1M"))">1M</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetStartDate("6M"))">6M</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetStartDate("1Y"))">1Y</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => SetStartDate("5Y"))">5Y</button>
            </div>
        </div>
        
        <div class="container" id="Indicators">

            <h5>Indicators</h5>

            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="TradingVolume">
                <label class="form-check-label" for="TradingVolume">
                    Trading Volume
                </label>
            </div>

            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="MovingAverage">
                <label class="form-check-label" for="MovingAverage">
                    Moving Average
                </label>
            </div>

            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="RSI">
                <label class="form-check-label" for="RSI">
                    RSI
                </label>
            </div>
        </div>
    </div>
</div>

@code {

    private ApexChart<HistBarsEntry> chart;
    
    public List<HistBarsEntry> HistBarsEntries { get; set; }
    
    public async Task getDataAndRender()
    {
        HistBars BaseData = await SData.GetHistBarData(SymbolInput, TimeFrame, DateTimeExtensions.ToRFC3339(StartDate), DateTimeExtensions.ToRFC3339(Date), 1000, "raw", "sip", "asc");
        HistBarsEntries = BaseData.Bars[SymbolInput];
        await chart.RenderAsync();
    }
    
    public string SymbolInput { get; set; }

    public string TimeFrame { get; set; } = "1H";

    public void SetTimeFrame(string frame)
    {
        TimeFrame = frame;
    }

    public DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-1);

    public void SetStartDate(string timestring)
    {
        switch (timestring)
        {
            case "1D":
                StartDate = DateTime.Today.AddDays(-1);
                break;
            case "1M":
                StartDate = DateTime.Today.AddMonths(-1);
                break;
            case "6M":
                StartDate = DateTime.Today.AddMonths(-6);
                break;
            case "1Y":
                StartDate = DateTime.Today.AddYears(-1);
                break;
            case "5Y":
                StartDate = DateTime.Today.AddYears(-5);
                break;
        }
       
    }
    
    DateTime Date = DateTime.Today;

    public static class DateTimeExtensions
    {
        public static string ToRFC3339(DateTime date)
        {
            return date.ToUniversalTime().ToString("yyyy-MM-dd'T'HH:mm:ss.fffK");
        }
    }

    public string RemoveLastChar(string input)
    {
        return input.Remove(input.Length - 1);
    }

    public DateTime prevDateTime { get; set; } = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

    public string formatDateTime(DateTime currDateTime)
    {
        if (currDateTime.Day != prevDateTime.Day)
        {
            prevDateTime = currDateTime;@*RemoveLastChar(currDateTime.ToUniversalTime().ToString("u"))*@
            return(currDateTime.ToString("d",
                CultureInfo.CreateSpecificCulture("en-US")));
        }
        else
        {
            prevDateTime = currDateTime;
            return (currDateTime.ToString("t", CultureInfo.CreateSpecificCulture("es-ES")));
        }
    }
    @*
    public string DateTimeToUnixTimestamp(DateTime input)
    {
        TimeSpan timeSpan = input - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        return timeSpan.TotalSeconds.ToString();
    }

    public DateTime UnixTimestampToDateTime(string input)
    {
        DateTime zerodate = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        return zerodate.AddSeconds(long.Parse(input));
    }
*@
}
